openapi: 3.0.3
info:
  title: Pharmacy
  description: |-
    This is a Pharmacy Server based on OpenAPI 3.0 specification.
  version: 1.0.0
servers:
  - url: https://petstore3.swagger.io/api/v3
tags:
  - name: medicine
    description: Everything about medicines
  - name: store
    description: Access to Pharmacy orders
  - name: user
    description: Operations about user
paths:
  /medicine:
    put:
      tags:
        - medicine
      summary: Update an existing medicine
      description: Update an existing medicine by Id
      operationId: updatePet
      requestBody:
        description: Update an existent pet in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Medicine'
          application/xml:
            schema:
              $ref: '#/components/schemas/Medicine'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Medicine'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Medicine'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Medicine'
        '400':
          description: Invalid ID supplied
        '403':
          description: Access forbidden
        '404':
          description: Medicine not found
        '405':
          description: Validation exception
      security:
        - pharmacy_auth: [pharmacist]
    post:
      tags:
        - medicine
      summary: Add a new medicine to the store
      description: Add a new medicine to the store
      operationId: addPet
      requestBody:
        description: Create a new medicine in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Medicine'
          application/xml:
            schema:
              $ref: '#/components/schemas/Medicine'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Medicine'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Medicine'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Medicine'
        '403':
            description: Access forbidden
        '405':
          description: Invalid input
      security:
        - pharmacy_auth: [pharmacist]
  /medicine/{medicineId}:
    get:
      tags:
        - medicine
      summary: Find medicine by ID
      description: Returns a single medicine
      operationId: getMedicineById
      parameters:
        - name: medicineId
          in: path
          description: ID of medicine to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Medicine'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Medicine'
        '400':
          description: Invalid ID supplied
        '404':
          description: Medicine not found
    delete:
      tags:
        - medicine
      summary: Deletes a medicine
      description: delete a medicine
      operationId: deleteMedicine
      parameters:
        - name: medicineId
          in: path
          description: Medicine id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid medicine value
        '403':
            description: Access forbidden
      security:
        - pharmacy_auth: [pharmacist]
  /medicine/addInDemand:
    post:
      tags:
        - medicine
      summary: Adds a medicine to demand
      description: ''
      operationId: addInDemand
      requestBody:          
        content:
          application/json:
                schema:
                  $ref: '#/components/schemas/Medicine'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Medicine'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Medicine'
        '400':
          description: Invalid ID supplied
        '404':
          description: Medicine not found
        '405':
          description: Validation exception
  /medicine/{medicineId}/uploadImage:
    post:
      tags:
        - medicine
      summary: Uploads an image
      description: ''
      operationId: uploadFile
      parameters:
        - name: medicineId
          in: path
          description: ID of medicine to update
          required: true
          schema:
            type: integer
            format: int64
        - name: additionalMetadata
          in: query
          description: Additional Metadata
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
      responses:
        '200':
          description: successful operation
        '403':
            description: Access forbidden
      security:
        - pharmacy_auth: [pharmacist]
  /store/inventory:
    get:
      tags:
        - store
      summary: Returns all medicines in stock
      description: Returns all medicines in stock
      operationId: getInventory
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/Medicine'
  /store/order:
    post:
      tags:
        - store
      summary: Create a new order
      description: Place a new order in the store
      operationId: placeOrder
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items: 
                $ref: '#/components/schemas/Medicine'
          application/xml:
            schema:
              type: array
              items: 
                $ref: '#/components/schemas/Medicine'
          application/x-www-form-urlencoded:
            schema:
              type: array
              items: 
                $ref: '#/components/schemas/Medicine'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '405':
          description: Invalid input
  /store/order/medicine:
    post:
      tags:
        - store
      summary: Add medicine to order
      description: Add medicine to order
      operationId: addMedOrder
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Medicine'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '405':
          description: Invalid input
  /store/order/{orderId}/getMedicines:
    get:
      tags:
        - store
      summary: Get order items
      operationId: getOrderItems
      parameters:
        - name: orderId
          in: path
          description: ID of order that needs to be fetched
          required: true
          schema:
            type: integer
            format: int64
      responses:  
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
  /store/order/{orderId}/{medicineId}:
    delete:
      tags:
        - store
      summary: Delete medicine from order
      operationId: delMedOrder
      parameters:
        - name: orderId
          in: path
          description: ID of order that needs to be fetched
          required: true
          schema:
            type: integer
            format: int64
        - name: medicineId
          in: path
          description: ID of medicine that needs to be deleted
          required: true
          schema:
            type: integer
            format: int64
      responses:  
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
      security:
        - pharmacy_auth: [user]
  /store/order/{orderId}:
    get:
      tags:
        - store
      summary: Find purchase order by ID
      operationId: getOrderById
      parameters:
        - name: orderId
          in: path
          description: ID of order that needs to be fetched
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
      security:
        - pharmacy_auth: [user]
    delete:
      tags:
        - store
      summary: Delete purchase order by ID
      operationId: deleteOrder
      parameters:
        - name: orderId
          in: path
          description: ID of the order that needs to be deleted
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid ID supplied
        '403':
            description: Access forbidden
        '404':
          description: Order not found
      security:
        - pharmacy_auth: [user]
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      description: ''
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: false
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        '400':
          description: Invalid username/password supplied
  /user/{userId}:
    get:
      tags:
        - user
      summary: Get user by user id
      description: ''
      operationId: getUserById
      parameters:
        - name: userId
          in: path
          description: 'The user id that needs to be fetched. Use user1 for testing. '
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'          
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid id supplied
        '404':
          description: User not found
      security:
        - pharmacy_auth: [user]
    put:
      tags:
        - user
      summary: Update user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: userId
          in: path
          description: id that need to be deleted
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
      security:
        - pharmacy_auth: [user]
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: userId
          in: path
          description: Id that needs to be deleted
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid id supplied
        '404':
          description: User not found
      security:
        - pharmacy_auth: [user]
components:
  schemas:
    Order:
      required:
        - id
        - status
        - customer_id
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        customer_id:
          type: integer
          format: int64
          example: 10
        shipDate:
          type: string
          format: date-time
        status:
          type: string
          description: Order Status
          example: approved
          enum:
            - placed
            - approved
            - delivered
            - completed
      xml:
        name: order
    Medicine:
      required:
        - id
        - name
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: Aspirin
        price:
          type: integer
          format: int64
          example: 100
        quantity:
          type: integer
          format: int64
          example: 100
        inDemand:
          type: boolean
          example: false
        photoUrls:
          type: array
          xml:
            wrapped: true
          items:
            type: string
            xml:
              name: photoUrl
      xml:
        name: medicine
    User:
      required:
        - id
        - password
        - email
        - role
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
        phone:
          type: string
          example: '12345'
        role:
          type: string
          enum: 
            - customer
            - pharmacist
      xml:
        name: user
    OrderItems:
      type: object
      properties:
        medicine:
          type: integer
          format: int64
        order:
          type: integer
          format: int64
      xml:
        name: orderItems
  securitySchemes:
    pharmacy_auth:
      type: http
      scheme: bearer